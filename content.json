{"posts":[{"title":"","text":"#博客 #环境搭建 其实很早就想搭建自己的博客了，那个时候用WP，DZ之类的，但无奈学习成本太高了，人生精力有限，因此选择了Hexo，其实也不是选择，只是想让自己的MD文件发挥更多的价值，正好看到GitHUB和Hexo的搭配，很符合我的胃口\\ -WILL 2023-03-31 Hexo是啥Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。简单的说就是轻量化小型化，不用数据库，更多的内容可以看他官网文档。 他的对我而言的优点如下 小型化，速度够快 配合GitHub Pages，我不用买服务器，买域名 不用特地准备SSL，不用担心证书会过期 准备Git环境准备Git环境，如果忘了细节可以去看[[Git安装-Win]] 去官网下载Git安装包，并通过默认参数安装完成 生成SSH秘钥，并添加到GitHUB后台，便于后期认证 添加全局用户名 安装完成 准备Node.js环境准备Node.JS环境，如果脑子抽了那就用[[Node.js安装-Win10]]治疗步骤很简单，简单到这一节可以忽略，但还是写一下把 去官网下载最新安装包 双击安装，无需修改任何内容 验证下安装是否OK node -v 准备GitHUB仓库如何注册GitHUB账号，我想识字的都会，这里主要将如何建立仓库，以及域名需要注意的方面 建立一个空库，属性要选择公开 ==坑来了==，创建仓库名的时候，格式必须为【你的GitHUB用户名+github.io】，千万不要想当然的起名字，否则稍后你访问的域名会变成https://milkteano7.github.io/XXXX，后面的XXXX将会是你想当然的起的名称 参考 GitHub Pages + Hexo + NexT + 自定义域名搭建永久有效的个人博客网站并进行SEO优化 GitHub+Hexo 搭建个人网站详细教程 Hexo模版 非常中文化的官方安装介绍内容","link":"/2024/03/24/Hexo-%E5%87%86%E5%A4%87%E7%8E%AF%E5%A2%83/"},{"title":"","text":"#博客 #搭建 生产日期\\ -WILL 2023-03-31 ![[Hexo-准备环境#Hexo是啥]] 准备~！在开始之前你需确认已经安装了node.js环境，这就好比你要装QQ必须先装Windows一样，可以简单的理解为Hexo是基于node.jsnode.js是hexo的基础依赖环境 安装Hexo模块目录准备 新建一个目录用于存放Hexo的文件 然后再地址栏输入CMD，以便直接定位到该目录，当然你硬是敲命令我也没意见 无论是cmd运行Node.JS，还是进入hexo文件夹内右键打开Git Bash Here，安装模块的命令相同 1npm install -g hexo-cli 安装模块的命令为npm install -g hexo-cli 这是原版命令，如果安装缓慢可以更换国内源 国内源其实是安装了cnpm工具，之后通过cnpm进行安装 如果安装了cnpm，之后的命令都会令开头都会多个n 命令会变更成cnpm install -g hexo-cli 本例中并没有咏唱，直接完成了下载操作。。。你真信了 安装完成后，样张如下12345678npm install -g hexo-cli*************************C:\\Hexo&gt;npm install -g hexo-clichanged 59 packages in 32s15 packages are looking for funding run `npm fund` for details 然后可以通过hexo -v检查一下模块是否安装成功，如果成功会出现一堆模块的版本信息==更新也是用相同命令== 初始化Hexo目录 在node.js下，安装了模块并不等于就有了hexo，就好比我下载好了QQ，只要我不双击装，那还是等于没有 初始化这个过程可以在Git下面进行，也你能在CMD定位到目录进行，下面以CMD为例子一定要在空的文件夹下运行123456789使用如下命令，如果不用目录名，就在当前目录生成hexo init# 输出如下Administrator@DESKTOP-73HSVF0 MINGW64 /c/Hexo$ hexo initINFO Cloning hexo-starter https://github.com/hexojs/hexo-starter.gitINFO Install dependenciesINFO Start blogging with Hexo! 初始化成功后，hexo文件夹内会出现如下的文件 node_modules 依赖包 public存放生成的页面 scaffolds生成文章的一些模板 source用来存放你的文章 themes放下下载的主题 _config.yml博客的核心配置文件（设置主体、标题等属性）安装上传工具一定要在先安装这个这个git插件，否则会提示找不到工具1npm install hexo-deployer-git --save npm install：这是 Node.js 的包管理工具 npm 的一条命令，用于安装一个或多个包。 hexo-deployer-git：这是你要安装的包的名称。这个包是 Hexo 的一个部署器，用于将 Hexo 生成的网站文件部署到 Git 仓库。 --save：这个选项告诉 npm 将安装的包作为依赖项保存到你的 package.json 文件中。这意味着当你将项目分享给其他人或者在其他项目中重用这个配置时，他们也需要安装这个包。 添加SSH密钥其实这部分如果只有一个环境，只有一个仓库那么操作起来还是比较简单的，不用去靠谱其他的因素但就是我的学习环境也是有很多其他的环境因素需要考虑这里简单点现已一个仓库的情况来描述操作顺序 建立SSH密钥 把公钥放到Github中去 把密钥放到C:\\Users\\Administrator\\.ssh 修改HEXO的配置文件，让他只用指定的密钥创建密钥指定文件名创建过程会把密钥元就地方便的拉在原地，如果不带文件名则会去.ssh文件夹1ssh-keygen -t ED25519 -C &quot;ST-DELL-WILL-BJB&quot; -f hexo 创建SSH配置文件需要手动创建和unbunt等linux不同，Windows.ssh文件夹下默认是没有config.conf文件的在ssh目录中新建一个config文件，不需要后缀名 12345678910111213# HEXO配置Host hexo HostName github.com User git IdentityFile ~/.ssh/hexo IdentitiesOnly yes# 其他配置Host github.com HostName github.com User git IdentityFile ~/.ssh/obsidian IdentitiesOnly yes IdentitiesOnly 是 SSH 配置文件中的一个选项，它用于指定 SSH 客户端是否只使用配置文件中指定的密钥来建立连接，而不去尝试其他可能的密钥。GIthub可以创建仓库密钥，而不是账户密钥 安装Hexo注意如下最好的方法是在VS Code中打开项目目录然后来进行操作，这是最简单的实践方式之一你所需要做的是 打开VS Code 文件-打开文件夹 终端-新建终端 切换到Git终端 修改本地配置文件 主要配置网站根目录下的_config.yml 配置文件，最好别用记事本，用VSCode或者其他文本编辑器都行 需要修改的内容在最下方使用Git的方式1234deploy: type: git repo: git@github.com:MilkTeaNo7/MilkTeaNo7.github.io.git branch: master 使用http的方式1234deploy: type: git repo: git@github.com:MilkTeaNo7/MilkTeaNo7.github.io.git branch: main 就和Git命令一样，其实有如上两种上传方式 用git方式，需要用到SSH秘钥，要提前上传，好处是不用每次都输入密码 http方式，好处是不用SSH秘钥，问题是每次都要输入密码我喜欢ssh方式，看起来高端啊~！ 多Git仓库的配置这里是个坑 当你有一个GitHUB账户，然后里面有多个仓库的时候 或者有一个GitHUB账户，要参加别项目的时候 一个GitHUB，一个墙国内版本的时候你需要分别配置config的SSH配置文件，与HEXO的_config.yml文件关键就是host的配置123456789101112# config的配置文件Host hexo # 这里原来是Github.com HostName github.com User git IdentityFile ~/.ssh/hexo IdentitiesOnly yes# _config.yml的配置文件deploy: type: git repo: git@hexo:MilkTeaNo7/MilkTeaNo7.github.io.git # 注意看git@后面的 branch: main 说明 默认的都是github.com，不区分大小写 如果config的配置文件配置文件HostName更改了 那么HEXO的_config.yml文件中git后面的内容也要修改 启动Hexo启动测试 1hexo server 在CMD中运行hexo server，注意需要在安装了Hexo的文件夹进行，本例是在C:\\Hexo 注意，需要在cmd或者git客户端下运行，不要再poawershell否则会报错 根据提示访问网址，他会给出一个内网地址，一般是http://localhost:4000 如果端口4000和本地已有端口冲突，那么可以在启动的时候加上端口，比如hexo server -p 5000 查看网站的时候CMD窗口不能关闭，或者按Ctrl+C终止 最终部署感谢我自己写到了这里，2024年3月24日这是第二次折腾，发现有许多巨坑别高兴，真正麻烦的现在才开始需要确认 密钥是否上传了，密钥检查是否通过 密钥是否放到对的位置了 _config.yml 配置文件是否已经修改好了否者会有很多问题等着你 将网站发布也叫做部署，可以用这两个命令，区别在于一个是全称，一个是简写，本质没有区别 12345678910111213hexo deployhexo d# 如果成功，则是下方的提示INFO Validating configINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...On branch masternothing to commit, working tree cleanEverything up-to-datebranch 'master' set up to track 'git@hexo:MilkTeaNo7/MilkTeaNo7.github.io.git/main'.INFO Deploy done: git 访问你的博客当一切处理妥当后可以访问你的博客，网址就是你GitHUB的用户名+github.io比如 https://milkteano7.github.io","link":"/2024/03/24/Hexo-%E5%BC%80%E5%A7%8B%E9%85%8D%E7%BD%AE/"},{"title":"","text":"#正在搞 生产日期2024-03-24 18:39让我开心一下，谢谢了 12git clone https://github.com/fan-lv/Fan.git themes/Fangit clone https://github.com/saicaca/hexo-theme-vivia.git themes/vivia Administrator@WILL-TOP MINGW64 ~/Downloads/hexo$ git clone https://github.com/fan-lv/Fan.git themes/FanCloning into ‘themes/Fan’…fatal: unable to access ‘https://github.com/fan-lv/Fan.git/‘: Failure when receiving data from the peer 多来几次 根据主页安装所需报 1npm install --save hexo-renderer-pug hexo-renderer-stylus 修改配置 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: lands # 注释掉，修改成新的 123hexo cleanhexo ghexo d hexo server –debug 参考 官方的模板下载页面","link":"/2024/03/24/Hexo-%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/"},{"title":"","text":"生产日期2023-07-07 13:17 问题 一个网站从 一台服务器搬迁到另外 一台服务器 因为是docker部署的，我连docker启动配置文件都是照抄的，数据库目录什么的都是一模一样的 当我启动docker，访问原来的主页的时候，他却是只有文字，没有图片等内容，犹如网速很慢很多内容没有加载出来一样 对于这个 问题，表面上就是CSS没有加载的感觉，当然我也不知道CSS是啥 问题点说明 该问题是WordPress数据库里面对于访问地址不正确所导致的，对此需要这么做 登陆WordPress的容器 从WordPress的容器中，跳转登陆到没有端口号的MySQL数据库 用查询语句更新关键字段 处理步骤 登陆MYSQL注意容器名字，特别是数据库名字是否正确在登陆数据库的时候有账户名密码，这个是建立docker的时候配置文件中自定的，可以去[[WordPress-博客]]中查看 123docker exec -it wordpress-db-1 bashmysql -u wd_db_user -puse wordpress_db 查询错误网址主要就是用来看下现在的登陆网址是否有问题 12345678SELECT * FROM wp_options WHERE option_name = 'home' OR option_name = 'siteurl';+-----------+-------------+-----------------------------+----------+| option_id | option_name | option_value | autoload |+-----------+-------------+-----------------------------+----------+| 2 | home | http://139.224.37.141:8500/ | yes || 1 | siteurl | http://139.224.37.141:8500/ | yes |+-----------+-------------+-----------------------------+----------+2 rows in set (0.00 sec) 如上是查询命令，其实需要修改的就是这两个字段中的option_value 修正问题 12345# 可以先把这两个字段设置成空UPDATE wp_options SET option_value = '' WHERE option_name = 'home' OR option_name = 'siteurl';# 设置成想要的UPDATE wp_options SET option_value = 'http://139.224.37.141:8500/' WHERE option_name = 'home' OR option_name = 'siteurl'; 处理图片问题 在网站搬家之后如果已经通过如上方式解决了网页无法现实或者显示错乱的问题，那么之后你会遇到图片大部分出现问你，在转圈圈等情况，对于之前上传过的图片无法加载的问题，可以通过类似方法通过mysql更新数据库中对于图片的网址来解决 对wordpress网站图片迁移后的访问问题,可以通过数据库来更新图片的URL地址 登录wordpress数据库,找到wp_posts表,该表包含了所有文章和页面的内容 运行如下SQL查询,筛选出图片类型的帖子:1SELECT * FROM wp_posts WHERE post_type = 'attachment'; 这样可以提取出所有附件,也就是图片posts。 然后需要修改这些posts的 guid和post_content字段中的图片URL地址: guid字段保存着图片原始URL post_content字段中可能还有图片URL作为HTML标签属性 可以使用REPLACE函数来批量替换URL: 1234UPDATE wp_postsSET guid = REPLACE(guid, 'old-domain', 'new-domain'),post_content = REPLACE(post_content, 'old-domain', 'new-domain')WHERE post_type = 'attachment'; 1234UPDATE wp_postsSET guid = REPLACE(guid, 'https://zhiqiansoft.com/', 'http://139.224.37.141:8500/'),post_content = REPLACE(post_content, 'https://zhiqiansoft.com/', 'https://zhiqiansoft.com')WHERE post_type = 'attachment'; 参考 如果要粗暴的备份方法，可以看[[WordPress-备份]]","link":"/2024/03/24/WordPress-%E4%B8%BB%E9%A1%B5%E6%98%BE%E7%A4%BA%E5%BC%82%E5%B8%B8/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2024/03/24/hello-world/"}],"tags":[],"categories":[],"pages":[{"title":"about","text":"","link":"/about/index.html"}]}